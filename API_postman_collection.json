{
	"info": {
		"_postman_id": "0700b97c-816a-423e-957a-341bd4c05b7d",
		"name": "API Testing On Reqres.in",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40901400",
		"_collection_link": "https://www.postman.com/joint-operations-astronaut-47789611/workspace/api-testing/collection/40901400-0700b97c-816a-423e-957a-341bd4c05b7d?action=share&source=collection_link&creator=40901400"
	},
	"item": [
		{
			"name": "GET list user page 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let Jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Status Code is 200 OK\", function (){\r",
							"    pm.response.to.have.status(200);\r",
							"}); //Validasi status code\r",
							"\r",
							"pm.test(\"Response body contains valid JSON text\", function(){\r",
							"    pm.response.to.be.json;\r",
							"}); //Validasi format JSON\r",
							"\r",
							"pm.test(\"First user data has email field\", function(){\r",
							"    pm.expect(Jsondata.data[0]).to.have.property(\"email\");\r",
							"}); //Validasi  struktur response\r",
							"\r",
							"pm.test(\"First user data has id : 7\", function(){\r",
							"    pm.expect(Jsondata.data[0].id).to.eql(7);\r",
							"}); //Validasi nilai response\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"}); //Validasi response time "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users?page=2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET user id 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let Jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Status Code is 200 OK\", function (){\r",
							"    pm.response.to.have.status(200);\r",
							"}); //Validasi status code\r",
							"\r",
							"pm.test(\"Response body contains valid JSON text\", function(){\r",
							"    pm.response.to.be.json;\r",
							"}); //Validasi format JSON\r",
							"\r",
							"pm.test(\"User data has email field\", function(){\r",
							"    pm.expect(Jsondata.data).to.have.property(\"email\");\r",
							"}); //Validasi  struktur response\r",
							"\r",
							"pm.test(\"User id is 2\", function(){\r",
							"    pm.expect(Jsondata.data.id).to.eql(2);\r",
							"}); //Validasi nilai response\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"}); //Validasi response time "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single user not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 Not found\", function () {\r",
							"    pm.response.to.have.status(404); \r",
							"}); // Validasi status code\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
							"}); // Validasi response time\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/23",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Created User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 created\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"}); //Validasi status respon 201 Created\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"}); //Validasi respon time kurang dari 1000ms\r",
							"\r",
							"pm.test(\"Response body contains name Irma Suryani\", function (){\r",
							"    pm.expect(pm.response.text()).to.include('Irma Suryani');\r",
							"}); //Validasi nama Irma Suryani ada di response body\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Irma Suryani\",\r\n    \"job\": \"Junior QA\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update all user data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let Jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"}); //Validasi status code\r",
							"\r",
							"pm.test(\"Response body contains valid JSON text\", function(){\r",
							"    pm.response.to.be.json;\r",
							"}); //Validasi format JSON\r",
							"\r",
							"pm.test(\"User data has name field\", function(){\r",
							"    pm.expect(Jsondata).to.have.property(\"name\");\r",
							"}); //Validasi  struktur response\r",
							"\r",
							"pm.test(\"User job is 'QA Enthusiast' \", function(){\r",
							"    pm.expect(Jsondata.job).to.eql(\"QA Enthusiast\");\r",
							"}); //Validasi nilai response\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"}); //Validasi response time \r",
							"\r",
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Irma Suryani\",\r\n    \"job\": \"QA Enthusiast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update some user data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let Jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"}); //Validasi status code\r",
							"\r",
							"pm.test(\"Response body contains valid JSON text\", function(){\r",
							"    pm.response.to.be.json;\r",
							"}); //Validasi format JSON\r",
							"\r",
							"pm.test(\"User data has id field\", function(){\r",
							"    pm.expect(Jsondata).to.have.property(\"id\");\r",
							"}); //Validasi  struktur response \r",
							" // <<< DI SINI GAGAL karena `id` tidak ada seharusnya tetap ada karena patch tidak menghapus data yang tidak di update, patch hanya mengubah data yang di update.\r",
							"\r",
							"\r",
							"pm.test(\"User first name is 'Irma' \", function(){\r",
							"    pm.expect(Jsondata.first_name).to.eql(\"Irma\");\r",
							"}); //Validasi nilai response\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"}); //Validasi response time \r",
							"\r",
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"first_name\": \"Irma\",\r\n    \"last_name\": \"Suryani\"\r\n\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user id 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 No Content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"}); // Validasi status code \r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"}); // Validasi Response time\r",
							"\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"}); // Validasi bahwa body respons kosong setelah penghapusan data. \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/users/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Succes Register with  valid credential",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let Jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Status Code is 200 OK\", function (){\r",
							"    pm.response.to.have.status(200);\r",
							"}); //Validasi status code\r",
							"\r",
							"pm.test(\"Response body contains valid JSON text\", function(){\r",
							"    pm.response.to.be.json;\r",
							"}); //Validasi format JSON\r",
							"\r",
							"pm.test(\"User data has token field\", function(){\r",
							"    pm.expect(Jsondata).to.have.property(\"token\");\r",
							"}); //Validasi  struktur response\r",
							"\r",
							"pm.test(\"User id is: 4 \", function(){\r",
							"    pm.expect(Jsondata.id).to.eql(4);\r",
							"}); //Validasi nilai response\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"}); //Validasi response time "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failed register with invalid credential",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let Jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Status Code is 400 Bad Request\", function (){\r",
							"    pm.response.to.have.status(400);\r",
							"}); //Validasi status code\r",
							"\r",
							"pm.test(\"Response body contains valid JSON text\", function(){\r",
							"    pm.response.to.be.json;\r",
							"}); //Validasi format JSON\r",
							"\r",
							"pm.test(\"Response contains error message\", function (){\r",
							"    pm.expect(Jsondata).to.have.property(\"error\");\r",
							"}); //Validasi struktur response (field)\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"}); //Validasi response time "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"irma.holt@reqres.in\",\r\n    \"password\": \"irmaaacoba\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Succes login with valid credential",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let Jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Status Code is 200 OK\", function (){\r",
							"    pm.response.to.have.status(200);\r",
							"}); //Validasi status code\r",
							"\r",
							"pm.test(\"Response body contains valid JSON text\", function(){\r",
							"    pm.response.to.be.json;\r",
							"}); //Validasi format JSON\r",
							"\r",
							"pm.test(\"User data has token field\", function(){\r",
							"    pm.expect(Jsondata).to.have.property(\"token\");\r",
							"}); //Validasi  struktur response\r",
							"\r",
							"pm.test(\"User token is: QpwL5tke4Pnpja7X4 \", function(){\r",
							"    pm.expect(Jsondata.token).to.eql(\"QpwL5tke4Pnpja7X4\");\r",
							"}); //Validasi nilai response\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"}); //Validasi response time "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failed login with invalid credential",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let Jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Status Code is 400 Bad Request\", function (){\r",
							"    pm.response.to.have.status(400);\r",
							"}); //Validasi status code\r",
							"\r",
							"pm.test(\"Response body contains valid JSON text\", function(){\r",
							"    pm.response.to.be.json;\r",
							"}); //Validasi format JSON\r",
							"\r",
							"pm.test(\"Response contains error message\", function (){\r",
							"    pm.expect(Jsondata).to.have.property(\"error\");\r",
							"}); //Validasi struktur response (field)\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"}); //Validasi response time "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"irmaaacoba\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	]
}